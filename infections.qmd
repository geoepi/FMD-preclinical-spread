---
title: "Outbreak Magnitude"
description: "Summarize the number of farms and total cattle infected in simulated outbreaks"
format:
  html: 
    df-print: kable
    code-fold: true
    code-summary: "Code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{=html}
<style type="text/css">

body, td {
   font-size: 13pt;
}
code.r{
  font-size: 9pt;
}
pre {
  font-size: 11pt
}
</style>
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
library(tidyverse)
options(dplyr.summarise.inform = FALSE)

library(usefun)
library(ggplot2)
library(here)
library(patchwork)
library(scales)

## Custom Functions
source(here("./R/utilities.R"))
source_dir("./R")

## Assign file path 
file_path <- "./script-inputs/isp-outputs"

## Import infection data
infection <- import_infection_data(file_path)

## Order scenario_type
infection$scenario_type <- ordered(factor(infection$scenario_type), c("optimal", "suboptimal", "low-virulence"))

## Order regions
infection$region <- ordered(factor(infection$region), c("central", "eastern"))
```

## Infection Summary
`summarize_infections()` summarizes infection metrics by iteration. 
```{r}
## Summarize infection metrics for each iteration
infect_summary <- summarize_infections(infection)
```

View a subset of `infect_summary`
```{r}
## Filter data to scenario
infect_summary_select <- infect_summary %>%
  filter(region == "central") %>%
  filter(scenario_type == "suboptimal") %>%
  filter(preclinical == 2)

## Select and order columns to display
infect_summary_select <- infect_summary_select[c("iteration", "farms_infected", "cattle_infected", "first_infect", "last_infect")]

## Check data
head(infect_summary_select)
```

### Summary Statistics
`generate_infect_statistics()` returns summary statistics for each modeling scenario. Results are grouped by `region`, `scenario_type`, and `preclinical`. The output is filtered by `summary` and `region` to compare `farms_infected` and `cattle_infected` between scenarios.
```{r}
infect_config_summary <- generate_infect_statistics(infect_summary)

## Filter to farms
farms_inf_summary <- infect_config_summary %>%    
  filter(summary == "farms_infected")

## Filter to cattle
cattle_inf_summary <- infect_config_summary %>%    
  filter(summary == "cattle_infected")
```

## Infected Farms
The number of infected farms

::: panel-tabset
## Central U.S.
```{r}
## Filter to central region
farms_central_summary <- farms_inf_summary %>%
  filter(region == "central")

## Select and order columns
farms_central_summary <- farms_central_summary[c("scenario_type", "preclinical", "mean", "q05", "q25", "q50", "q75", "q95")]

farms_central_summary
```

## Eastern U.S.
```{r}
## Filter to eastern region
farms_eastern_summary <- farms_inf_summary %>%
  filter(region == "eastern")

## Select and order columns
farms_eastern_summary <- farms_eastern_summary[c("scenario_type", "preclinical", "mean", "q05", "q25", "q50", "q75", "q95")]

farms_eastern_summary
```

:::

## Total Cattle
The total number of cattle on infected farms

::: panel-tabset
## Central U.S.
```{r}
## Filter to central region
cattle_central_summary <- cattle_inf_summary %>%
  filter(region == "central")

## Select and order columns
cattle_central_summary <- cattle_central_summary[c("scenario_type", "preclinical", "mean", "q05", "q25", "q50", "q75", "q95")]

cattle_central_summary
```

## Eastern U.S.
```{r}
## Filter to eastern region
cattle_eastern_summary <- cattle_inf_summary %>%
  filter(region == "eastern")

## Select and order columns
cattle_eastern_summary <- cattle_eastern_summary[c("scenario_type", "preclinical", "mean", "q05", "q25", "q50", "q75", "q95")]

cattle_eastern_summary
```

:::

## Significance Test
Perform significance testing on `optimal` and `suboptimal` detection scenarios.

```{r}
## Filter out low virulence scenarios
no_LV <- infection %>%
  filter(scenario_type != "low-virulence")

no_LV_summary <- summarize_infections(no_LV)
```

### Linear Model

::: panel-tabset
## Central U.S.
```{r}
## Filter to central region
no_LV_central_summary <- no_LV_summary %>%
  filter(region == "central")

model_central_cattle <- lm(log(cattle_infected) ~ preclinical * scenario_type, 
                       data = no_LV_central_summary)

summary(model_central_cattle)
```

## Eastern U.S.
```{r}
## Filter to eastern region
no_LV_eastern_summary <- no_LV_summary %>%
  filter(region == "eastern")

model_eastern_cattle <- lm(log(cattle_infected) ~ preclinical * scenario_type, 
                       data = no_LV_eastern_summary)

summary(model_eastern_cattle)
```

:::

### ANOVA

::: panel-tabset
## Central U.S.
```{r message=FALSE, warning=FALSE}
anova(model_central_cattle)
```

## Eastern U.S.
```{r message=FALSE, warning=FALSE}
anova(model_eastern_cattle)
```

:::

## Plot Cattle Numbers
```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Assign scenario colors
scenario_colors <- c("#74add1", "orange2", "red4") 
```

`plot_infected_cattle()` returns a plot with the duration of incubation phase transmission on the x-axis and the median number of infected cattle (log10) on the y-axis.

::: panel-tabset
## Central U.S.
```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
central_cattle_plot <- plot_infected_cattle(cattle_central_summary, "central")

central_cattle_plot
```

## Eastern U.S.
```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
eastern_cattle_plot <- plot_infected_cattle(cattle_eastern_summary, "eastern")

eastern_cattle_plot
```

:::
