---
title: "Outbreak Magnitude"
description: "Summarize the number of farms and total cattle infected in simulated outbreaks"
format:
  html: 
    df-print: kable
    code-fold: show
    code-summary: "Hide code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{=html}
<style type="text/css">

body, td {
   font-size: 13pt;
}
code.r{
  font-size: 9pt;
}
pre {
  font-size: 11pt
}
</style>
```


```{r, warning=FALSE, message=FALSE, echo=FALSE}
library(tidyverse)
options(dplyr.summarise.inform = FALSE)

library(usefun)
library(ggplot2)
library(here)
library(patchwork)
library(scales)

## Custom Functions
source(here("./R/utilities.R"))
source_dir("./R")

## Assign file path 
generic_path <- "./script-inputs/isp-outputs"

## Assign regional scenario
regional_scenario <- "eastern"

regional_path <- sprintf("%s/outputs_%s", generic_path, regional_scenario)

## Import infection data
infection <- import_infection_data(regional_path)
```

## Infection Summary
The `summarize_infections` function generates a data frame summarizing infection events by iteration. The `generate_infect_statistics` generates a data frame of summary statistics grouped by preclinical infectious duration and response type.
```{r}
## Summarize infection metrics for each iteration
infect_summary <- summarize_infections(infection)

head(infect_summary, 3)

## Generate summary statistics
infect_config_summary <- generate_infect_statistics(infect_summary)

dim(infect_config_summary)
```

## Summarize Farms
```{r}
farms_inf_summary <- infect_config_summary %>%    
  filter(summary == "farms_infected")

farms_inf_summary
```

## Summarize Cattle
```{r}
cattle_inf_summary <- infect_config_summary %>%    
  filter(summary == "cattle_infected")

cattle_inf_summary
```

## Significance Test
Significance testing performed on optimal and suboptimal detection scenarios
```{r}
## Filter out low virulence scenarios
no_low_virulence <- infection %>%
  filter(response != "low-virulence")

no_low_virulence_summary <- summarize_infections(no_low_virulence)

range(no_low_virulence_summary$cattle_infected) # high values
plot(density(no_low_virulence_summary$cattle_infected)) #long tail

## Log scale to normalize data
range(log(no_low_virulence_summary$cattle_infected))
plot(density(log(no_low_virulence_summary$cattle_infected)))
```

### Linear Model
```{r}
model_inf_cattle <- lm(log(cattle_infected) ~ preclinical_days * response, 
                       data = no_low_virulence_summary)

summary(model_inf_cattle)
```

### Analysis of Variance (ANOVA)
```{r}
anova(model_inf_cattle)
```

## Plot Cattle Numbers
Prepare to plot the median number of infected cattle by scenario
```{r}
cattle_inf_summary$response <- ordered(factor(cattle_inf_summary$response), c("optimal", "suboptimal", "low-virulence"))

## Assign response colors
response_colors <- c("#74add1", "orange2", "red4") 
```

### Generate Plot Using Patchwork Package
The `plot_infected_cattle` function plots infected cattle by scenario, with the duration of incubation phase transmission on the x-axis and the median number of infected cattle on the y-axis.
```{r, message = FALSE, warning = FALSE}
infect_cattle_plot <- plot_infected_cattle(cattle_inf_summary, regional_scenario)
```

```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
infect_cattle_plot
```