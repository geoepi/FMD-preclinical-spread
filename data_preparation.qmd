---
title: "Data Preparation"
description: "Load and format modeling data for analysis"
format:
  html: 
    df-print: kable
    code-fold: true
    code-summary: "Code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---
```{=html}
<style type="text/css">

body, td {
   font-size: 13pt;
}
code.r{
  font-size: 9pt;
}
pre {
  font-size: 11pt
}
</style>
```

::: {.callout-tip icon=true}
#### 

This page includes tables and figures for the Central and Eastern U.S. scenarios. Select the tabs in the panels below to compare results between regions.
  
:::

## Load Libraries  
Load needed R-packages to execute code.
```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(usefun)
library(ggplot2)
library(here)
library(patchwork)
library(scales)
library(geosphere)
library(terra)
library(raster)
library(sf)
library(viridis)
library(pals)

select <- dplyr::select
```

## Custom Functions  
Custom functions to process ISP outputs and generate figure plots.  These are available from the linked repository at the top of the script.  
```{r message=FALSE, warning=FALSE}
source(here("./R/utilities.R"))
source_dir("./R")
```

## Import Data
```{r}
## Assign file path
file_path <- "./script-inputs/isp-outputs"
```

#### Infection Data
The `import_infection_data()` reads the `Outputs_Infection.txt` files that include data on simulated infection events.
```{r}
infection <- import_infection_data(file_path)
```

::: panel-tabset
## All Regions
Check the number of infection events
```{r}
nrow(infection)
```

Check `infect_day` statistics
```{r}
infection %>%
  summarize(
    mean_day = mean(infect_day),
    first_day = min(infect_day),
    median_day = median(infect_day),
    last_day = max(infect_day))
```

## Central U.S.
Check the number of infection events
```{r}
## Filter to central region
infection_central <- infection %>%
  filter(regional_scenario == "central")

## Check data frame dimensions
nrow(infection_central)
```

Check `infect_day` statistics
```{r}
infection_central %>%
  summarize(
    mean_day = mean(infect_day),
    first_day = min(infect_day),
    median_day = median(infect_day),
    last_day = max(infect_day))
```

## Eastern U.S.
Check the number of infection events
```{r}
## Filter to eastern region
infection_eastern <- infection %>%
  filter(regional_scenario == "eastern")

## Check data frame dimensions
nrow(infection_eastern)
```

Check `infect_day` statistics
```{r}
infection_eastern %>%
  summarize(
    mean_day = mean(infect_day),
    first_day = min(infect_day),
    median_day = median(infect_day),
    last_day = max(infect_day))
```

:::

#### Detection Data
The `import_detection_data()` reads the `Outputs_Detection.txt` files that include data on simulated detection events.
```{r}
detection <- import_detection_data(file_path)
```

::: panel-tabset
## All Regions
Check the number of detection events
```{r}
nrow(detection)
```

Check `detect_day` statistics
```{r}
detection %>%
  summarize(
    first_day = min(detect_day),
    mean_day = mean(detect_day),
    median_day = median(detect_day),
    last_day = max(detect_day))
```

## Central U.S.
Check the number of detection events
```{r}
## Filter to central region
detection_central <- detection %>%
  filter(regional_scenario == "central")

nrow(detection_central)
```

Check `detect_day` statistics
```{r}
detection_central %>%
  summarize(
    first_day = min(detect_day),
    mean_day = mean(detect_day),
    median_day = median(detect_day),
    last_day = max(detect_day))
```

## Eastern U.S.
Check the number of detection events
```{r}
## Filter to eastern region
detection_eastern <- detection %>%
  filter(regional_scenario == "eastern")

nrow(detection_eastern)
```

Check `detect_day` statistics
```{r}
detection_eastern %>%
  summarize(
    first_day = min(detect_day),
    mean_day = mean(detect_day),
    median_day = median(detect_day),
    last_day = max(detect_day))
```

:::

## Read Farm Reference File
The FMD Farm Reference File used for this project contains geographic coordinates for theoretical farm locations. Premises data were generated using the Farm Location and Agricultural Production Simulator (FLAPS, see Burdett et al. 2015) and do not reflect true farm locations. Farm demographics are based upon data collected in the U.S. Census of Agriculture conducted by the USDA National Agricultural Statistical Service (NASS).
```{r}
reference <- read.csv2(here("script-inputs/reference-files/FMD_Reference_File.csv"), header=TRUE, sep=",")

colnames(reference) <- c(
                      "premises",
                      "class",
                      "cattle",
                      "weight",
                      "x",
                      "y",
                      "state",
                      "longitude",
                      "latitude",
                      "geo_region"
                      )

## Select columns needed for spread analyses
reference <- reference %>%
  mutate(longitude = as.numeric(longitude),
         latitude = as.numeric(latitude)) %>%
  select(-c(weight, cattle, x, y, geo_region))

nrow(reference)
```

#### What does this mean?

Each row in `reference` contains data for a unique, theoretical cattle premises. This data is used to simulate FMDV-spread between cattle farms throughout the United States.