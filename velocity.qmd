---
title: "Wave Velocity"
description: "Calculate epidemic velocity of simulated outbreaks"
format:
  html: 
    df-print: kable
    code-fold: show
    code-summary: "Hide code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---
```{=html}
<style type="text/css">

body, td {
   font-size: 13pt;
}
code.r{
  font-size: 9pt;
}
pre {
  font-size: 11pt
}
</style>
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Load libraries
library(tidyverse)
options(dplyr.summarise.inform = FALSE)

library(geosphere)# calculate distances from long/lat
library(terra)
library(raster)
library(sf)
library(scales)
library(viridis)
library(pals)
library(here)

select <- dplyr::select

## Custom functions
source(here("./R/utilities.R"))
source_dir("./R")

## Assign file path 
generic_path <- "./script-inputs/isp-outputs"

## Assign regional scenario
regional_scenario <- "eastern"

regional_path <- sprintf("%s/outputs_%s", generic_path, regional_scenario)

## Import infection data
infection <- import_infection_data(regional_path)

## Read farm reference file
reference <- read.csv2(here("script-inputs/reference-files/FMD_Reference_File.csv"), header=TRUE, sep=",")

colnames(reference) <- c(
                      "premises",
                      "class",
                      "cattle",
                      "weight",
                      "x",
                      "y",
                      "state",
                      "longitude",
                      "latitude",
                      "geo_region"
                        )

reference <- reference %>%
  mutate(longitude = as.numeric(longitude),
         latitude = as.numeric(latitude)) %>%
  select(-c(weight, cattle, x, y, geo_region))
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Extract paths for each scenario
region_paths <- list.files(path = here(regional_path),
                            recursive = T, pattern= "Outputs_Infection", full.names=TRUE) 
```

## Daily Distances
The `compile_daily_summary()` function calculates distances (km) between source farms and those infected for each iteration, then calculates the quantiles by day across all iterations to get the average statistics.
```{r}
daily_summary <- compile_daily_summary(region_paths, reference)
```

### Compare Scenarios
Drop low-virulence scenario from `combined_summary` and calculate percentiles
```{r}
daily_all <- daily_summary$combined_summary

daily_quants <- daily_summary$combined_summary %>%
  filter(scenario != "low-virulence/6-days-preclinical")
```

### Prepare to plot data across scenarios
```{r}
my_summary_compare <- daily_quants %>%
  mutate(
    scenario_type = str_to_title(word(scenario, 1, sep = "/")),
    preclinical_delay = word(scenario, 2, sep = "/") %>% 
      str_replace_all("-days?-preclinical", "") %>% 
      str_trim() %>% 
      paste("Days Preclinical", .) %>% 
      str_to_title()
  )

all_summary_compare <- daily_all %>%
  mutate(
    scenario_type = str_to_title(word(scenario, 1, sep = "/")),
    preclinical_delay = word(scenario, 2, sep = "/") %>% 
      str_replace_all("-days?-preclinical", "") %>% 
      str_trim() %>% 
      paste("Days Preclinical", .) %>% 
      str_to_title()
  )
```

## Plot Wave Velocity
```{r, message = FALSE, warning = FALSE}
all_summary_compare <- all_summary_compare %>%
  mutate(
    preclinical_delay = recode(preclinical_delay,
                               "Days Preclinical 0" = "None",
                               "Days Preclinical 1" = "1 Day",
                               "Days Preclinical 2" = "2 Days",
                               "Days Preclinical 3" = "3 Days",
                               "Days Preclinical 6" = "6 Days")
  )

all_summary_compare$scenario_type <- ordered(factor(all_summary_compare$scenario_type), 
                                      c("Optimal", "Suboptimal", "Low-Virulence"))

all_summary_compare$preclinical_delay <- ordered(factor(all_summary_compare$preclinical_delay), 
                                      c("None", "1 Day", "2 Days", "3 Days", "6 Days"))

myCols <- kelly()

velocity_plot <- ggplot(all_summary_compare, aes(infect_day, log(cred_50), 
                               group = scenario, col = preclinical_delay)) +
  geom_line(linewidth = 0.4) +
  ylim(0, 6) +
  scale_color_manual(values = c(
    "None" = myCols[3],
    "1 Day" = myCols[4],
    "2 Days" = myCols[6],
    "3 Days" = myCols[7],
    "6 Days" = myCols[10]
    )) +
  facet_wrap(~ scenario_type, ncol=1) +
  labs(
    x = "Simulation Day",
    y = "Distance (log km)",
    col = "Preclinical Duration",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "bottom",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    legend.key.width = unit(3, "line"),
    legend.key.height = unit(1, "line"),
    legend.text = element_text(size = 16, face = "bold"),
    legend.title = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
velocity_plot
```