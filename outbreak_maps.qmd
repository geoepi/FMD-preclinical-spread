---
title: "Outbreak Maps"
description: "Map cumulative case detections across all iterations by scenario"
format:
  html: 
    df-print: kable
    code-fold: true
    code-summary: "Code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{=html}
<style type="text/css">

body, td {
   font-size: 13pt;
}
code.r{
  font-size: 9pt;
}
pre {
  font-size: 11pt
}
</style>
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Load libraries
library(tidyverse)
options(dplyr.summarise.inform = FALSE)

library(geosphere)# calculate distances from long/lat
library(terra)
library(raster)
library(sf)
library(scales)
library(viridis)
library(pals)
library(here)
library(patchwork)

select <- dplyr::select

## Custom functions
source(here("./R/utilities.R"))
source_dir("./R")

## Assign file path 
generic_path <- "./script-inputs/isp-outputs"

## Read farm reference file
reference <- read.csv2(here("script-inputs/reference-files/FMD_Reference_File.csv"), header=TRUE, sep=",")

colnames(reference) <- c(
                      "premises",
                      "class",
                      "cattle",
                      "weight",
                      "x",
                      "y",
                      "state",
                      "longitude",
                      "latitude",
                      "geo_region"
                        )

reference <- reference %>%
  mutate(longitude = as.numeric(longitude),
         latitude = as.numeric(latitude)) %>%
  select(-c(weight, cattle, x, y, geo_region))
```

## Create Raster Grids
Prepare to plot outbreak maps. First, get shapefile and set region boundaries. Then, create a raster grid version. Code demonstrates the workflow for the Eastern U.S. region. Outbreak maps for the Central U.S. are included below.

### Region Boundaries
Get shapefile and subset to region
```{r}
## Get shapefile for conterminous U.S.
whole_us <- vect(here("script-inputs/shapefile/Contiguous_USA_for Regional_Model.shp")) 

## Boundaries for eastern U.S.
eastern_us <- subset(whole_us, whole_us$SUB_REGION %in% 
                       c("East North Central", "East North Central", 
                         "East South Central", "east South Central",
                         "New England", "Middle Atlantic", "South Atlantic"))
```

### Create Raster Grid
Create a raster grid version for each region
```{r}
tmp_r <- rast(ext(eastern_us), 
              resolution = 25000, # 25km grid
              crs = crs(eastern_us))

east_r  <- rasterize(eastern_us, tmp_r)

east_r[east_r == 1] <- 0 # set land areas to 0
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Boundaries for Central U.S.
central_us <- subset(whole_us, whole_us$SUB_REGION %in% 
                       c("West North Central", "East North Central", 
                         "East South Central", "West South Central",
                         "New England", "Middle Atlantic", "South Atlantic"))

## Create raster grid
tmp_r <- rast(ext(central_us), 
              resolution = 25000, # 25km grid
              crs = crs(central_us))

central_r  <- rasterize(central_us, tmp_r)

central_r[central_r == 1] <- 0 # set land areas to 0
```

## Cumulative Cases

### Count Cumulative Case Detections
`raster_point_counts()` will count the number of detection events in each 25km cell. Smoothing the raster will improve the appearance by making the cells smaller and finding averages of surrounding cells.
```{r}
## Extract file paths to data
regional_path <- sprintf("%s/outputs_%s", generic_path, "eastern")

region_paths <- list.files(path = here(regional_path),
                            recursive = T, pattern= "Outputs_Detection", full.names=TRUE)

## Count events
count_events <- raster_point_counts(region_paths, # paths to files
                                    reference, # coordinate references
                                    east_r) # raster defining grid

## Smooth raster
count_events <- smooth_raster(count_events)
```

### Plot Cumulative Case Detections
`plot_raster_stack()` will plot the rasters for comparison.
```{r}
no_low_virulence <- subset(count_events, 
                           !(names(count_events) %in% "low-virulence/6-days-preclinical"))

only_low_virulence <- subset(count_events, 
                            names(count_events) %in% "low-virulence/6-days-preclinical")
```

## Eastern U.S. Maps
Compare outbreak maps across optimal and suboptimal detection scenarios
```{r fig.width=12, fig.height=12, warning=FALSE, message=FALSE}
stack_set <- plot_raster_stack(no_low_virulence, eastern_us)

stack_set
```

View map of cumulative cases for low-virulence scenario
```{r fig.width=8, fig.height=8, warning=FALSE, message=FALSE}
lv_set <- plot_raster_stack(only_low_virulence, eastern_us)

lv_set
```

## Central U.S. Maps
```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Extract file paths
regional_path <- sprintf("%s/outputs_%s", generic_path, "central")

region_paths <- list.files(path = here(regional_path),
                            recursive = T, pattern= "Outputs_Detection", full.names=TRUE)

## Count events
count_events <- raster_point_counts(region_paths, # paths to files
                                    reference, # coordinate references
                                    central_r) # raster defining grid

## Smooth raster
count_events <- smooth_raster(count_events)

## Create subsets
no_low_virulence <- subset(count_events, 
                           !(names(count_events) %in% "low-virulence/6-days-preclinical"))

only_low_virulence <- subset(count_events, 
                            names(count_events) %in% "low-virulence/6-days-preclinical")
```

Compare outbreak maps across optimal and suboptimal detection scenarios
```{r fig.width=18, fig.height=12, warning=FALSE, message=FALSE}
stack_set <- plot_raster_stack(no_low_virulence, central_us)

stack_set
```

View map of cumulative cases for low-virulence scenario
```{r fig.width=8, fig.height=8, warning=FALSE, message=FALSE}
lv_set <- plot_raster_stack(only_low_virulence, central_us)

lv_set
```