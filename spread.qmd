---
title: "Transmission Metrics"
description: "Calculate transmission metrics to estimate epidemic potential, velocity, and spread"
format:
  html: 
    df-print: kable
    code-fold: true
    code-summary: "Code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{=html}
<style type="text/css">

body, td {
   font-size: 13pt;
}
code.r{
  font-size: 9pt;
}
pre {
  font-size: 11pt
}
</style>
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Load libraries
library(tidyverse)
options(dplyr.summarise.inform = FALSE)

library(geosphere)# calculate distances from long/lat
library(terra)
library(raster)
library(sf)
library(scales)
library(viridis)
library(pals)
library(here)

select <- dplyr::select

## Custom functions
source(here("./R/utilities.R"))
source_dir("./R")

## Assign file path 
file_path <- "./script-inputs/isp-outputs"

## Assign regional scenario                 
regional_scenario <- "eastern"

regional_path <- sprintf("%s/outputs_%s", file_path, regional_scenario)

## Import infection data
infection <- import_infection_data(file_path)

## Order scenario_type
infection$scenario_type <- ordered(factor(infection$scenario_type), c("optimal", "suboptimal", "low-virulence"))

## Order regions
infection$region <- ordered(factor(infection$region), c("central", "eastern"))

## Read farm reference file
reference <- read.csv2(here("script-inputs/reference-files/FMD_Reference_File.csv"), header=TRUE, sep=",")

colnames(reference) <- c(
                      "premises",
                      "class",
                      "cattle",
                      "weight",
                      "x",
                      "y",
                      "state",
                      "longitude",
                      "latitude",
                      "geo_region"
                        )

reference <- reference %>%
  mutate(longitude = as.numeric(longitude),
         latitude = as.numeric(latitude)) %>%
  select(-c(weight, cattle, x, y, geo_region))

## Merge infection data with reference file
merge <- left_join(infection, reference, by = join_by(premises))

## Extract paths for each scenario
region_paths <- list.files(path = here(regional_path),
                            recursive = T, pattern= "Outputs_Infection", full.names=TRUE) 
```

## Effective Reproduction
The Effective Reproduction Number (Re) is the average number of secondary premises infected by a source per day. Re is used to estimate epidemic potential.
```{r}
## exclude index cases (source == 0)
transmissions <- merge %>% 
  filter(source != 0)

## find the number of transmissions per source for each iteration and infect_day
iteration_Re <- transmissions %>%
  group_by(region, scenario_type, preclinical, iteration, infect_day, source) %>%
  summarize(num_transmissions = n(), .groups = "drop") 

iteration_mean_Re <- iteration_Re %>%
  group_by(region, scenario_type, preclinical, iteration, infect_day) %>%
  summarize(Re = mean(num_transmissions), .groups = "drop")

## summarize daily Re across iterations
daily_Re_summary <- iteration_mean_Re %>%
  group_by(region, scenario_type, preclinical, infect_day) %>%
  summarize(
    mean = mean(Re, na.rm = TRUE),
    q05 = quantile(Re, probs = 0.05, na.rm = TRUE),
    q25 = quantile(Re, probs = 0.25, na.rm = TRUE),
    q50 = quantile(Re, probs = 0.50, na.rm = TRUE),
    q75 = quantile(Re, probs = 0.75, na.rm = TRUE),
    q95 = quantile(Re, probs = 0.95, na.rm = TRUE),
    .groups   = "drop")

## Daily summary
daily_Re <- daily_Re_summary %>%
  group_by(region, scenario_type, preclinical) %>%
  complete(infect_day = 10:365, 
            fill = list(mean = 0, q05 = 0, 
                        q25 = 0, q50 = 0, q75 = 0, q95 = 0)) %>%
  ungroup()
```

### Daily Summaries

::: panel-tabset
## Central U.S.
View summary table of `daily Re` in the central region
```{r}
## Filter to central region
daily_Re_central <- daily_Re %>%
  filter(region == "central")

## Filter to scenario
daily_Re_central_select <- daily_Re_central %>%
  filter(scenario_type == "suboptimal") %>%
  filter(preclinical == "3")

## Select and order columns to display
daily_Re_central_select <- daily_Re_central_select[c("infect_day", "mean", "q05", "q25", "q50", "q75", "q95")]

head(daily_Re_central_select)
```

## Eastern U.S.
View summary table of `daily Re` in the eastern region
```{r}
## Filter to eastern region
daily_Re_eastern <- daily_Re %>%
  filter(region == "eastern")

## Filter to scenario
daily_Re_eastern_select <- daily_Re_eastern %>%
  filter(scenario_type == "suboptimal") %>%
  filter(preclinical == "3")

## Select and order columns to display
daily_Re_eastern_select <- daily_Re_eastern_select[c("infect_day", "mean", "q05", "q25", "q50", "q75", "q95")]

head(daily_Re_eastern_select)
```

:::

### Plot Effective Reproduction
The dashed line is at Re = 1

::: panel-tabset
## Central U.S.
```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
## Prepare data
daily_Re <- daily_Re_central %>%
  mutate(
    preclinical = recode(preclinical,
                               "0" = "None",
                               "1" = "1 Day",
                               "2" = "2 Days",
                               "3" = "3 Days",
                               "6" = "6 Days")
  ) %>%
  mutate(
    scenario_type = recode(scenario_type,
                               "optimal" = "Optimal",
                               "suboptimal" = "Suboptimal",
                               "low-virulence" = "Low-Virulence")
  )  

daily_Re$preclinical <- ordered(factor(daily_Re$preclinical), 
                                      c("None", "1 Day", "2 Days", "3 Days", "6 Days"))

## Assign colors
myCols <- kelly()

## Plot data
ggplot(daily_Re, aes(infect_day, q50, group = preclinical, col = preclinical)) +
  geom_hline(yintercept = 1, col="black", linewidth=0.5, linetype = "dashed") +
  geom_smooth(method = "loess", span=0.05, se=FALSE) +
  scale_color_manual(values = c(
    "None" = myCols[3],
    "1 Day" = myCols[4],
    "2 Days" = myCols[6],
    "3 Days" = myCols[7],
    "6 Days" = myCols[10]
    )) +
  facet_wrap(~ scenario_type, ncol=1) +
  labs(
    x = "Simulation Day",
    y = "Median Effective Reproduction (Re)",
    col = "Preclinical Duration",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "bottom",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 20, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    legend.key.width = unit(3, "line"),
    legend.key.height = unit(1, "line"),
    legend.text = element_text(size = 16, face = "bold"),
    legend.title = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

## Eastern U.S.
```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
## Prepare data
daily_Re <- daily_Re_eastern %>%
  mutate(
    preclinical = recode(preclinical,
                               "0" = "None",
                               "1" = "1 Day",
                               "2" = "2 Days",
                               "3" = "3 Days",
                               "6" = "6 Days")
  ) %>%
  mutate(
    scenario_type = recode(scenario_type,
                               "optimal" = "Optimal",
                               "suboptimal" = "Suboptimal",
                               "low-virulence" = "Low-Virulence")
  ) 

daily_Re$preclinical <- ordered(factor(daily_Re$preclinical), 
                                      c("None", "1 Day", "2 Days", "3 Days", "6 Days"))

## Assign colors
myCols <- kelly()

## Plot data
ggplot(daily_Re, aes(infect_day, q50, group = preclinical, col = preclinical)) +
  geom_hline(yintercept = 1, col="black", linewidth=0.5, linetype = "dashed") +
  geom_smooth(method = "loess", span=0.05, se=FALSE) +
  scale_color_manual(values = c(
    "None" = myCols[3],
    "1 Day" = myCols[4],
    "2 Days" = myCols[6],
    "3 Days" = myCols[7],
    "6 Days" = myCols[10]
    )) +
  facet_wrap(~ scenario_type, ncol=1) +
  labs(
    x = "Simulation Day",
    y = "Median Effective Reproduction (Re)",
    col = "Preclinical Duration",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "bottom",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 20, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    legend.key.width = unit(3, "line"),
    legend.key.height = unit(1, "line"),
    legend.text = element_text(size = 16, face = "bold"),
    legend.title = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

:::

::: {.callout-note icon=true}

Example code demonstrates the workflow for the Eastern U.S. region. Central U.S. figures are included in the regional panels below. Select the tabs to view regional comparisons.
  
:::

## Epidemic Velocity
The epidemic velocity is the distance (km) of spread per day. The epidemic velocity is estimated by first calculating the daily spread distances.

### Calculate Daily Distances
`compile_daily_summary()` calculates distances (km) between source farms and those infected for each iteration, then calculates the percentiles by day across all iterations to get the average statistics.
```{r}
daily_summary <- compile_daily_summary(region_paths, reference)
```

### Compare Scenarios
Compare quantiles across all scenarios and prepare to calculate wave velocity.
```{r}
## Get quantiles
daily_all <- daily_summary$combined_summary

## Compare scenarios
all_summary_compare <- daily_all %>%
  mutate(
    scenario_type = str_to_title(word(scenario, 1, sep = "/")),
    preclinical = word(scenario, 2, sep = "/") %>% 
      str_replace_all("-days?-preclinical", "") %>% 
      str_trim() %>% 
      paste("Days Preclinical", .) %>% 
      str_to_title()
  )
```

### Plot Epidemic Velocity

::: panel-tabset
## Central U.S.
```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Extract file paths
central_path <- sprintf("%s/outputs_%s", file_path, "central")

central_paths <- list.files(path = here(central_path),
                            recursive = T, pattern= "Outputs_Infection", full.names=TRUE) 

daily_summary_central <- compile_daily_summary(central_paths, reference)

daily_all_central <- daily_summary_central$combined_summary

daily_quants_central <- daily_summary_central$combined_summary %>%
  filter(scenario != "low-virulence/6-days-preclinical")

my_summary_compare_central <- daily_quants_central %>%
  mutate(
    scenario_type = str_to_title(word(scenario, 1, sep = "/")),
    preclinical = word(scenario, 2, sep = "/") %>% 
      str_replace_all("-days?-preclinical", "") %>% 
      str_trim() %>% 
      paste("Days Preclinical", .) %>% 
      str_to_title()
  )

all_summary_compare_central <- daily_all_central %>%
  mutate(
    scenario_type = str_to_title(word(scenario, 1, sep = "/")),
    preclinical = word(scenario, 2, sep = "/") %>% 
      str_replace_all("-days?-preclinical", "") %>% 
      str_trim() %>% 
      paste("Days Preclinical", .) %>% 
      str_to_title()
  )
```

```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
all_summary_compare <- all_summary_compare_central %>%
  mutate(
    preclinical = recode(preclinical,
                               "Days Preclinical 0" = "None",
                               "Days Preclinical 1" = "1 Day",
                               "Days Preclinical 2" = "2 Days",
                               "Days Preclinical 3" = "3 Days",
                               "Days Preclinical 6" = "6 Days")
  )

all_summary_compare$scenario_type <- ordered(factor(all_summary_compare$scenario_type), 
                                      c("Optimal", "Suboptimal", "Low-Virulence"))

all_summary_compare$preclinical <- ordered(factor(all_summary_compare$preclinical), 
                                      c("None", "1 Day", "2 Days", "3 Days", "6 Days"))

myCols <- kelly()

ggplot(all_summary_compare, aes(infect_day, log(q50), 
                               group = scenario, col = preclinical)) +
  geom_line(linewidth = 0.4) +
  ylim(0, 6) +
  scale_color_manual(values = c(
    "None" = myCols[3],
    "1 Day" = myCols[4],
    "2 Days" = myCols[6],
    "3 Days" = myCols[7],
    "6 Days" = myCols[10]
    )) +
  facet_wrap(~ scenario_type, ncol=1) +
  labs(
    x = "Simulation Day",
    y = "Distance (log km)",
    col = "Preclinical Infectious Duration",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "bottom",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    legend.key.width = unit(3, "line"),
    legend.key.height = unit(1, "line"),
    legend.text = element_text(size = 16, face = "bold"),
    legend.title = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

## Eastern U.S.
```{r, warning=FALSE, message=FALSE, echo=FALSE}
all_summary_compare <- daily_all %>%
  mutate(
    scenario_type = str_to_title(word(scenario, 1, sep = "/")),
    preclinical = word(scenario, 2, sep = "/") %>% 
      str_replace_all("-days?-preclinical", "") %>% 
      str_trim() %>% 
      paste("Days Preclinical", .) %>% 
      str_to_title())
```

```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
all_summary_compare <- all_summary_compare %>%
  mutate(
    preclinical = recode(preclinical,
                               "Days Preclinical 0" = "None",
                               "Days Preclinical 1" = "1 Day",
                               "Days Preclinical 2" = "2 Days",
                               "Days Preclinical 3" = "3 Days",
                               "Days Preclinical 6" = "6 Days")
  )

all_summary_compare$scenario_type <- ordered(factor(all_summary_compare$scenario_type), 
                                      c("Optimal", "Suboptimal", "Low-Virulence"))

all_summary_compare$preclinical <- ordered(factor(all_summary_compare$preclinical), 
                                      c("None", "1 Day", "2 Days", "3 Days", "6 Days"))

myCols <- kelly()

ggplot(all_summary_compare, aes(infect_day, log(q50), 
                               group = scenario, col = preclinical)) +
  geom_line(linewidth = 0.4) +
  ylim(0, 6) +
  scale_color_manual(values = c(
    "None" = myCols[3],
    "1 Day" = myCols[4],
    "2 Days" = myCols[6],
    "3 Days" = myCols[7],
    "6 Days" = myCols[10]
    )) +
  facet_wrap(~ scenario_type, ncol=1) +
  labs(
    x = "Simulation Day",
    y = "Distance (log km)",
    col = "Preclinical Infectious Duration",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "bottom",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    legend.key.width = unit(3, "line"),
    legend.key.height = unit(1, "line"),
    legend.text = element_text(size = 16, face = "bold"),
    legend.title = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

:::

## Iteration Metrics
Compare scenarios by looking for patterns at the level of individual iterations. `iteration_metrics()` will use the other output in `daily_summary` to look at trends between optimal and suboptimal responses.

The function returns iteration specific metrics:

auc_log

:   The amount of area (total) under the plotted line (distance x day) above on a log scale, i.e., the Area Under Curve (AUC). This represents the total distance covered during the outbreak`s spread (on the log scale).

peak_spread

:   The maximum distance spread in any one day (log scale).

peak_day

:   The infect day that the maximum spread distance (`peak_spread`) occurred.

```{r}
## Calculate daily iteration metrics
iteration_metrics <- iteration_metrics(daily_summary$daily_distances) %>%
  select(-c(scenario))

## Capitalize scenario labels
iteration_metrics$scenario_type <- str_to_title(iteration_metrics$scenario_type)

## Order scenario levels
iteration_metrics$scenario_type <- ordered(factor(iteration_metrics$scenario_type), 
                                      c("Optimal","Suboptimal", "Low-virulence"))
```

View sample of iteration metrics
```{r}
## Filter data to scenario
iteration_metrics_select <- iteration_metrics %>%
  filter(scenario_type == "Suboptimal") %>%
  filter(preclinical == "3")

## Select and order columns to display
iteration_metrics_select <- iteration_metrics_select[c("iteration", "auc_log", "peak_spread", "peak_day")]

head(iteration_metrics_select)
```

## Cumulative Spread
Drop the low-virulence scenarios to compare optimal and suboptimal detection scenarios. Plot the estimated Area Under the Curve (AUC). `auc_log` represents the total cumulative spread distance, for each scenario by iteration, on a log scale.
```{r fig.width=10, fig.height=6, message=FALSE, warning=FALSE}
## Drop the low-virulence scenario
iteration_metrics_no_low <- iteration_metrics %>%
  filter(scenario_type != "Low-Virulence")

## Plot AUC
ggplot(iteration_metrics_no_low, 
       aes(x = preclinical, y = auc_log, color = scenario_type)) +
  geom_point(shape=1, alpha = 0.3, size = 2) + # individual iterations
  geom_smooth(method = "lm", se = FALSE, linewidth=1.2) + # trend
  facet_grid(. ~ scenario_type) +
  scale_color_manual(values = c("Suboptimal" = "#74add1", "Optimal" = "orange2")) +
  labs(
    x = "Preclinical Infectious Duration (days)",
    y = "Cumulative Spread (log AUC)",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "none",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

### Significance Test
Fit a linear model with an interaction term to quantify the influence of preclinical infectious duration (`preclinical`) and detection scenario (`scenario_type`) on cumulative outbreak spread (`auc_log`).

#### Linear Model

::: panel-tabset
## Central U.S.
```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Load function
source(here("R/iteration_metrics.R"))

## Calculate daily iteration metrics
iteration_metrics_central <- iteration_metrics(daily_summary_central$daily_distances) %>%
  select(-c(scenario))

## Capitalize scenario labels
iteration_metrics_central$scenario_type <- str_to_title(iteration_metrics_central$scenario_type)

## Order scenario levels
iteration_metrics_central$scenario_type <- ordered(factor(iteration_metrics_central$scenario_type), 
                                      c("Optimal","Suboptimal", "Low-virulence"))

## Drop the low-virulence scenario
iteration_metrics_no_low_central <- iteration_metrics_central %>%
  filter(scenario_type != "Low-Virulence")
```

```{r}
model_auc_central <- lm(auc_log ~ preclinical * scenario_type, data = iteration_metrics_no_low_central)

summary(model_auc_central)
```

## Eastern U.S.
```{r}
model_auc <- lm(auc_log ~ preclinical * scenario_type, data = iteration_metrics_no_low)

summary(model_auc)
```

:::

#### ANOVA

::: panel-tabset
## Central U.S.
```{r}
anova(model_auc_central)
```

## Eastern U.S.
```{r}
anova(model_auc)
```

:::

## Peak Spread
As with cumulative spread above, comparisons can be made using the peak spread rates.
```{r fig.width=10, fig.height=6, message=FALSE, warning=FALSE}
ggplot(iteration_metrics_no_low, aes(x = preclinical, y = peak_day, color = scenario_type)) +
  geom_point(shape=1, alpha = 0.3, size = 2) + # individual iterations
  geom_smooth(method = "lm", se = FALSE, linewidth=1.2) +
  facet_grid(. ~ scenario_type) +
  scale_color_manual(values = c("Suboptimal" = "#74add1", "Optimal" = "orange2")) +
  labs(
    x = "Preclinical Infectious Duration (days)",
    y = "Day of Peak Transmission",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "none",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

### Significance Test
Fit a linear model with an interaction term to quantify the influence of `preclinical` and `scenario_type` on the maximum spread rate and it's (`peak_day`).

#### Linear Model
```{r}
model_peak <- lm(peak_day ~ preclinical * scenario_type, data = iteration_metrics_no_low)

summary(model_peak)
```

#### ANOVA
```{r}
anova(model_peak)
```
