---
title: "Transmission Metrics"
description: "Calculate transmission metrics to estimate epidemic potential, velocity, and spread"
format:
  html: 
    df-print: kable
    code-fold: true
    code-summary: "Code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{=html}
<style type="text/css">

body, td {
   font-size: 13pt;
}
code.r{
  font-size: 9pt;
}
pre {
  font-size: 11pt
}
</style>
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Load libraries
library(tidyverse)
options(dplyr.summarise.inform = FALSE)

library(geosphere)# calculate distances from long/lat
library(terra)
library(raster)
library(sf)
library(scales)
library(viridis)
library(pals)
library(here)

select <- dplyr::select

## Custom functions
source(here("./R/utilities.R"))
source_dir("./R")

## Assign file path 
file_path <- "./script-inputs/isp-outputs"

## Import infection data
infection <- import_infection_data(file_path)

## Order scenario_type
infection$scenario_type <- ordered(factor(infection$scenario_type), c("optimal", "suboptimal", "low-virulence"))

## Order regions
infection$region <- ordered(factor(infection$region), c("western", "central", "eastern"))

## Read farm reference file
reference <- read.csv2(here("script-inputs/reference-files/FMD_Reference_File.csv"), header=TRUE, sep=",")

colnames(reference) <- c(
                      "premises",
                      "class",
                      "cattle",
                      "weight",
                      "x",
                      "y",
                      "state",
                      "longitude",
                      "latitude",
                      "geo_region"
                        )

reference <- reference %>%
  mutate(longitude = as.numeric(longitude),
         latitude = as.numeric(latitude)) %>%
  select(-c(weight, cattle, x, y, geo_region))

## Merge infection data with reference file
merge <- left_join(infection, reference, by = join_by(premises))
```

## Effective Reproduction
The Effective Reproduction Number (Re) is the average number of secondary premises infected by a source per day. Re is used to estimate epidemic potential.
```{r}
## exclude index cases (source_farm == 0)
transmissions <- merge %>% 
  filter(source_farm != 0)

## Count the number of transmissions per source farm for each iteration on each infect_day
iteration_Re <- transmissions %>%
  group_by(region, scenario_type, preclinical, iteration, infect_day, source_farm) %>%
  summarize(num_transmissions = n(), .groups = "drop") 

## Filter to regions
iteration_Re_western <- iteration_Re %>%
  filter(region == "western")

iteration_Re_central <- iteration_Re %>%
  filter(region == "central")

iteration_Re_eastern <- iteration_Re %>%
  filter(region == "eastern")
```

View example of daily `iteration_Re`
```{r}
## Filter to scenario to display
iteration_Re_central_select <- iteration_Re_central %>%
  filter(scenario_type == "suboptimal") %>%
  filter(preclinical == "2")

## Select and order columns to display
iteration_Re_central_select <- iteration_Re_central_select[c("iteration", "infect_day", "source_farm", "num_transmissions")]

head(iteration_Re_central_select)
```

### Daily Summaries
Calculate daily summaries for each region.
```{r}
## Western U.S.
daily_Re_western <- calculate_daily_Re(iteration_Re_western)

## Central U.S.
daily_Re_central <- calculate_daily_Re(iteration_Re_central)

## Eastern U.S.
daily_Re_eastern <- calculate_daily_Re(iteration_Re_eastern)
```

### Significance Testing 
Perform significance testing on `optimal` and `suboptimal` detection scenarios.

#### Linear Model

::: panel-tabset
## Western U.S.
```{r}
no_LV_western_Re <-daily_Re_western %>%
  filter(scenario_type != "low-virulence")

model_western_Re <- lm(q50 ~ preclinical * scenario_type, data = no_LV_western_Re)

summary(model_western_Re)
```

## Central U.S.
```{r}
no_LV_central_Re <-daily_Re_central %>%
  filter(scenario_type != "low-virulence")

model_central_Re <- lm(q50 ~ preclinical * scenario_type, data = no_LV_central_Re)

summary(model_central_Re)
```

## Eastern U.S.
```{r}
no_LV_eastern_Re <-daily_Re_eastern %>%
  filter(scenario_type != "low-virulence")

model_eastern_Re <- lm(q50 ~ preclinical * scenario_type, data = no_LV_eastern_Re)

summary(model_eastern_Re)
```

:::

#### ANOVA

::: panel-tabset
## Western U.S.
```{r}
anova(model_western_Re)
```

## Central U.S.
```{r}
anova(model_central_Re)
```

## Eastern U.S.
```{r}
anova(model_eastern_Re)
```

:::

### Plot Effective Reproduction
The dashed line is at Re = 1

::: panel-tabset
## Central U.S.
```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
central_Re_plot <- plot_daily_Re(daily_Re_central)

central_Re_plot
```

## Eastern U.S.
```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
eastern_Re_plot <- plot_daily_Re(daily_Re_eastern)

eastern_Re_plot
```

:::

## Epidemic Velocity
The epidemic velocity is the distance (km) of spread per day. The epidemic velocity is estimated by first calculating the daily spread distances.

### Calculate Daily Distances
`compile_daily_summary()` calculates distances (km) between source farms and those infected for each iteration, then calculates the percentiles by day across all iterations to get the average statistics.
```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Western U.S.
western_path <- sprintf("%s/outputs_%s", file_path, "western")

western_paths <- list.files(path = here(western_path),
                            recursive = T, pattern= "Outputs_Infection", full.names=TRUE) 

## Central U.S.
central_path <- sprintf("%s/outputs_%s", file_path, "central")

central_paths <- list.files(path = here(central_path),
                            recursive = T, pattern= "Outputs_Infection", full.names=TRUE) 

## Eastern U.S.
eastern_path <- sprintf("%s/outputs_%s", file_path, "eastern")

eastern_paths <- list.files(path = here(eastern_path),
                            recursive = T, pattern= "Outputs_Infection", full.names=TRUE)
```

```{r}
daily_summary_western <- compile_daily_summary(western_paths, reference)

daily_summary_central <- compile_daily_summary(central_paths, reference)

daily_summary_eastern <- compile_daily_summary(eastern_paths, reference)
```

### Plot Epidemic Velocity

::: panel-tabset
## Central U.S.
```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
## Get quantiles to compare scenarios
daily_central <- daily_summary_central$combined_summary

## Plot epidemic velocity
central_velocity_plot <- plot_wave_velocity(daily_central)

central_velocity_plot
```

## Eastern U.S.
```{r fig.width=12, fig.height=10, message=FALSE, warning=FALSE}
## Get quantiles to compare scenarios
daily_eastern <- daily_summary_eastern$combined_summary

## Plot epidemic velocity
eastern_velocity_plot <- plot_wave_velocity(daily_eastern)

eastern_velocity_plot
```

:::

## Iteration Metrics
Compare scenarios by looking for patterns at the level of individual iterations. `iteration_metrics()` will use the `daily_distances` output to look at trends between optimal and suboptimal responses.

The function returns iteration specific metrics:

auc_log

:   The amount of area (total) under the plotted line (distance x day) above on a log scale, i.e., the Area Under Curve (AUC). This represents the total distance covered during the outbreak`s spread (on the log scale).

peak_spread

:   The maximum distance spread in any one day (log scale).

peak_day

:   The infect day that the maximum spread distance (`peak_spread`) occurred.

```{r}
## Calculate daily iteration metrics
iteration_metrics_western <- iteration_metrics(daily_summary_western$daily_distances) %>%
  select(-c(scenario))

iteration_metrics_central <- iteration_metrics(daily_summary_central$daily_distances) %>%
  select(-c(scenario))

iteration_metrics_eastern <- iteration_metrics(daily_summary_eastern$daily_distances) %>%
  select(-c(scenario))
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Capitalize scenario labels
iteration_metrics_western <- iteration_metrics_western %>%
    mutate(
      scenario_type = recode(scenario_type,
                             "optimal" = "Optimal Detection",
                             "suboptimal" = "Suboptimal Detection",
                             "low-virulence" = "Low-Virulence"))

iteration_metrics_central <- iteration_metrics_central %>%
    mutate(
      scenario_type = recode(scenario_type,
                             "optimal" = "Optimal Detection",
                             "suboptimal" = "Suboptimal Detection",
                             "low-virulence" = "Low-Virulence"))  


iteration_metrics_eastern <- iteration_metrics_eastern %>%
    mutate(
      scenario_type = recode(scenario_type,
                             "optimal" = "Optimal Detection",
                             "suboptimal" = "Suboptimal Detection",
                             "low-virulence" = "Low-Virulence"))  

## Order scenario levels
iteration_metrics_western$scenario_type <- ordered(factor(iteration_metrics_western$scenario_type), 
                                      c("Optimal Detection","Suboptimal Detection", "Low-virulence"))

iteration_metrics_central$scenario_type <- ordered(factor(iteration_metrics_central$scenario_type), 
                                      c("Optimal Detection","Suboptimal Detection", "Low-virulence"))

iteration_metrics_eastern$scenario_type <- ordered(factor(iteration_metrics_eastern$scenario_type), 
                                      c("Optimal Detection","Suboptimal Detection", "Low-virulence"))
```

View example of iteration metrics
```{r}
## Filter data to scenario
iteration_metrics_central_select <- iteration_metrics_central %>%
  filter(scenario_type == "Suboptimal Detection") %>%
  filter(preclinical == "3")

## Select and order columns to display
iteration_metrics_central_select <- iteration_metrics_central_select[c("iteration", "auc_log", "peak_spread", "peak_day")]

head(iteration_metrics_central_select)
```

## Cumulative Spread
Drop the low-virulence scenarios to compare optimal and suboptimal detection scenarios. `auc_log` represents the total cumulative spread distance, for each scenario by iteration, on a log scale.

::: panel-tabset
## Western U.S.
```{r fig.width=10, fig.height=6, message=FALSE, warning=FALSE}
## Drop the low-virulence scenario
iteration_metrics_no_low_western <- iteration_metrics_western %>%
  filter(scenario_type != "Low-Virulence")

## Plot AUC
ggplot(iteration_metrics_no_low_western, 
       aes(x = preclinical, y = auc_log, color = scenario_type)) +
  geom_point(shape=1, alpha = 0.3, size = 2) + # individual iterations
  geom_smooth(method = "lm", se = FALSE, linewidth=1.2) + # trend
  ylim(0, 1500) +
  facet_grid(. ~ scenario_type) +
  scale_color_manual(values = c("Suboptimal Detection" = "#74add1", "Optimal Detection" = "orange2")) +
  labs(
    x = "Preclinical Infectious Duration (days)",
    y = "Cumulative Spread (log AUC)",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "none",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

## Central U.S.
```{r fig.width=10, fig.height=6, message=FALSE, warning=FALSE}
## Drop the low-virulence scenario
iteration_metrics_no_low_central <- iteration_metrics_central %>%
  filter(scenario_type != "Low-Virulence")

## Plot AUC
ggplot(iteration_metrics_no_low_central, 
       aes(x = preclinical, y = auc_log, color = scenario_type)) +
  geom_point(shape=1, alpha = 0.3, size = 2) + # individual iterations
  geom_smooth(method = "lm", se = FALSE, linewidth=1.2) + # trend
  ylim(0, 1500) +
  facet_grid(. ~ scenario_type) +
  scale_color_manual(values = c("Suboptimal Detection" = "#74add1", "Optimal Detection" = "orange2")) +
  labs(
    x = "Preclinical Infectious Duration (days)",
    y = "Cumulative Spread (log AUC)",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "none",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

## Eastern U.S.
```{r fig.width=10, fig.height=6, message=FALSE, warning=FALSE}
## Drop the low-virulence scenario
iteration_metrics_no_low_eastern <- iteration_metrics_eastern %>%
  filter(scenario_type != "Low-Virulence")

## Plot AUC
ggplot(iteration_metrics_no_low_eastern, 
       aes(x = preclinical, y = auc_log, color = scenario_type)) +
  geom_point(shape=1, alpha = 0.3, size = 2) + # individual iterations
  geom_smooth(method = "lm", se = FALSE, linewidth=1.2) + # trend
  ylim(0, 1500) +
  facet_grid(. ~ scenario_type) +
  scale_color_manual(values = c("Suboptimal Detection" = "#74add1", "Optimal Detection" = "orange2")) +
  labs(
    x = "Preclinical Infectious Duration (days)",
    y = "Cumulative Spread (log AUC)",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "none",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

:::

### Significance Test
Fit a linear model with an interaction term to quantify the influence of preclinical infectious duration (`preclinical`) and detection scenario (`scenario_type`) on cumulative outbreak spread (`auc_log`).

#### Linear Model

::: panel-tabset
## Western U.S.
```{r}
model_auc_western <- lm(auc_log ~ preclinical * scenario_type, data = iteration_metrics_no_low_western)

summary(model_auc_western)
```

## Central U.S.
```{r}
model_auc_central <- lm(auc_log ~ preclinical * scenario_type, data = iteration_metrics_no_low_central)

summary(model_auc_central)
```

## Eastern U.S.
```{r}
model_auc_eastern <- lm(auc_log ~ preclinical * scenario_type, data = iteration_metrics_no_low_eastern)

summary(model_auc_eastern)
```

:::

#### ANOVA

::: panel-tabset
## Western U.S.
```{r}
anova(model_auc_western)
```

## Central U.S.
```{r}
anova(model_auc_central)
```

## Eastern U.S.
```{r}
anova(model_auc_eastern)
```

:::

## Peak Spread
As with cumulative spread above, comparisons can be made using the peak spread rates.

::: panel-tabset
## Western U.S.
```{r fig.width=10, fig.height=6, message=FALSE, warning=FALSE}
ggplot(iteration_metrics_no_low_western, aes(x = preclinical, y = peak_day, color = scenario_type)) +
  geom_point(shape=1, alpha = 0.3, size = 2) + # individual iterations
  geom_smooth(method = "lm", se = FALSE, linewidth=1.2) +
  ylim(0, 365) +
  facet_grid(. ~ scenario_type) +
  scale_color_manual(values = c("Suboptimal Detection" = "#74add1", "Optimal Detection" = "orange2")) +
  labs(
    x = "Preclinical Infectious Duration (days)",
    y = "Day of Peak Transmission",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "none",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

## Central U.S.
```{r fig.width=10, fig.height=6, message=FALSE, warning=FALSE}
ggplot(iteration_metrics_no_low_central, aes(x = preclinical, y = peak_day, color = scenario_type)) +
  geom_point(shape=1, alpha = 0.3, size = 2) + # individual iterations
  geom_smooth(method = "lm", se = FALSE, linewidth=1.2) +
  ylim(0, 365) +
  facet_grid(. ~ scenario_type) +
  scale_color_manual(values = c("Suboptimal Detection" = "#74add1", "Optimal Detection" = "orange2")) +
  labs(
    x = "Preclinical Infectious Duration (days)",
    y = "Day of Peak Transmission",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "none",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

## Eastern U.S.
```{r fig.width=10, fig.height=6, message=FALSE, warning=FALSE}
ggplot(iteration_metrics_no_low_eastern, aes(x = preclinical, y = peak_day, color = scenario_type)) +
  geom_point(shape=1, alpha = 0.3, size = 2) + # individual iterations
  geom_smooth(method = "lm", se = FALSE, linewidth=1.2) +
  ylim(0, 365) +
  facet_grid(. ~ scenario_type) +
  scale_color_manual(values = c("Suboptimal Detection" = "#74add1", "Optimal Detection" = "orange2")) +
  labs(
    x = "Preclinical Infectious Duration (days)",
    y = "Day of Peak Transmission",
    title = " "
  ) +
  theme_minimal() +
  theme(
    plot.margin    = unit(c(0.25, 0.25, 0.25, 0.25), "cm"),
    legend.position = "none",
    strip.text     = element_text(size = 18, face = "bold", color = "gray40"),
    axis.title.x   = element_text(size = 22, face = "bold"),
    axis.title.y   = element_text(size = 22, face = "bold"),
    axis.text.x    = element_text(size = 18, face = "bold"),
    axis.text.y    = element_text(size = 18, face = "bold"),
    plot.title     = element_text(size = 22, face = "bold", hjust = 0.5)
  )
```

:::

### Significance Test
Fit a linear model with an interaction term to quantify the influence of `preclinical` and `scenario_type` on the maximum spread rate and it's (`peak_day`).

#### Linear Model

::: panel-tabset
## Western U.S.
```{r}
model_peak_western <- lm(peak_day ~ preclinical * scenario_type, data = iteration_metrics_no_low_western)

summary(model_peak_western)
```

## Central U.S.
```{r}
model_peak_central <- lm(peak_day ~ preclinical * scenario_type, data = iteration_metrics_no_low_central)

summary(model_peak_central)
```

## Eastern U.S.
```{r}
model_peak_eastern <- lm(peak_day ~ preclinical * scenario_type, data = iteration_metrics_no_low_eastern)

summary(model_peak_eastern)
```

:::

#### ANOVA

::: panel-tabset
## Western U.S.
```{r}
anova(model_peak_western)
```

## Central U.S.
```{r}
anova(model_peak_central)
```

## Eastern U.S.
```{r}
anova(model_peak_eastern)
```

:::
